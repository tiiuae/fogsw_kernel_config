##
## kernsec.org / kernel self protection project (KSPP) - section
##

# Report BUG() conditions and kill the offending process.
CONFIG_BUG=y

# Make sure kernel page tables have safe permissions.
CONFIG_DEBUG_KERNEL=y (prior to v4.11, needed to select CONFIG_DEBUG_RODATA below)
CONFIG_DEBUG_RODATA=y (prior to v4.11)
CONFIG_STRICT_KERNEL_RWX=y (since v4.11)

# Report any dangerous memory permissions (not available on all archs).
CONFIG_DEBUG_WX=y

# Use -fstack-protector-strong (gcc 4.9+) for best stack canary coverage.
# Prior to v4.18, these are:
#  CONFIG_CC_STACKPROTECTOR=y
#  CONFIG_CC_STACKPROTECTOR_STRONG=y
CONFIG_STACKPROTECTOR=y
CONFIG_STACKPROTECTOR_STRONG=y

# Do not allow direct physical memory access (but if you must have it, at least enable STRICT mode...)
# CONFIG_DEVMEM is not set
CONFIG_STRICT_DEVMEM=y
CONFIG_IO_STRICT_DEVMEM=y

# Provides some protections against SYN flooding.
CONFIG_SYN_COOKIES=y

# Perform additional validation of various commonly targeted structures.
CONFIG_DEBUG_CREDENTIALS=y
CONFIG_DEBUG_NOTIFIERS=y
CONFIG_DEBUG_LIST=y
CONFIG_DEBUG_SG=y
CONFIG_BUG_ON_DATA_CORRUPTION=y
CONFIG_SCHED_STACK_END_CHECK=y

# Provide userspace with seccomp BPF API for syscall attack surface reduction.
CONFIG_SECCOMP=y
CONFIG_SECCOMP_FILTER=y

# Provide userspace with ptrace ancestry protections.
CONFIG_SECURITY=y
CONFIG_SECURITY_YAMA=y

# Perform usercopy bounds checking. (And disable fallback to gain full whitelist enforcement.)
CONFIG_HARDENED_USERCOPY=y
# CONFIG_HARDENED_USERCOPY_FALLBACK is not set
# CONFIG_HARDENED_USERCOPY_PAGESPAN is not set

# Randomize allocator freelists, harden metadata.
CONFIG_SLAB_FREELIST_RANDOM=y
CONFIG_SLAB_FREELIST_HARDENED=y

# Randomize high-order page allocation freelist.
CONFIG_SHUFFLE_PAGE_ALLOCATOR=y

# Allow allocator validation checking to be enabled (see "slub_debug=P" below).
CONFIG_SLUB_DEBUG=y

# Wipe higher-level memory allocations when they are freed (needs "page_poison=1" command line below).
# (If you can afford even more performance penalty, leave CONFIG_PAGE_POISONING_NO_SANITY=n)
CONFIG_PAGE_POISONING=y
CONFIG_PAGE_POISONING_NO_SANITY=y
CONFIG_PAGE_POISONING_ZERO=y

# Wipe slab and page allocations (since v5.3)
# Instead of "slub_debug=P" and "page_poison=1", a single place can control memory allocation wiping now.
# The init_on_free is only needed if there is concern about minimizing stale data lifetime.
CONFIG_INIT_ON_ALLOC_DEFAULT_ON=y
CONFIG_INIT_ON_FREE_DEFAULT_ON=y

# Initialize all stack variables on function entry. (Clang builds only. For GCC, see CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y below)
CONFIG_INIT_STACK_ALL=y

# Adds guard pages to kernel stacks (not all architectures support this yet).
CONFIG_VMAP_STACK=y

# Perform extensive checks on reference counting.
CONFIG_REFCOUNT_FULL=y

# Check for memory copies that might overflow a structure in str*() and mem*() functions both at build-time and run-time.
CONFIG_FORTIFY_SOURCE=y

# Avoid kernel memory address exposures via dmesg (sets sysctl kernel.dmesg_restrict initial value to 1)
CONFIG_SECURITY_DMESG_RESTRICT=y

# Dangerous; enabling this allows direct physical memory writing.
CONFIG_ACPI_CUSTOM_METHOD=n

# Dangerous; enabling this disables brk ASLR.
CONFIG_COMPAT_BRK=n

# Dangerous; enabling this allows direct kernel memory writing.
CONFIG_DEVKMEM=n

# Dangerous; exposes kernel text image layout.
CONFIG_PROC_KCORE=n

# Dangerous; enabling this disables VDSO ASLR.
CONFIG_COMPAT_VDSO=n

# Dangerous; enabling this allows replacement of running kernel.
CONFIG_KEXEC=n

# Dangerous; enabling this allows replacement of running kernel.
CONFIG_HIBERNATION=n

# Prior to v4.1, assists heap memory attacks; best to keep interface disabled.
CONFIG_INET_DIAG=n

# Easily confused by misconfigured userspace, keep off.
CONFIG_BINFMT_MISC=n

# Use the modern PTY interface (devpts) only.
CONFIG_LEGACY_PTYS=n

# If SELinux can be disabled at runtime, the LSM structures cannot be read-only; keep off.
CONFIG_SECURITY_SELINUX_DISABLE=n

# Reboot devices immediately if kernel experiences an Oops.
CONFIG_PANIC_ON_OOPS=y
CONFIG_PANIC_TIMEOUT=-1

# Keep root from altering kernel memory via loadable modules.
CONFIG_MODULES=n

# But if CONFIG_MODULE=y is needed, at least they must be signed with a per-build key.
# CONFIG_DEBUG_SET_MODULE_RONX=y (prior to v4.11)
CONFIG_STRICT_MODULE_RWX=y
CONFIG_MODULE_SIG=y
CONFIG_MODULE_SIG_FORCE=y
CONFIG_MODULE_SIG_ALL=y
CONFIG_MODULE_SIG_SHA512=y
CONFIG_MODULE_SIG_HASH="sha512"
CONFIG_MODULE_SIG_KEY="certs/signing_key.pem"

##
## kernsec.org KSPP - GCC plugins section
##

# Enable GCC Plugins
CONFIG_GCC_PLUGINS=y

# Gather additional entropy at boot time for systems that may not have appropriate entropy sources.
CONFIG_GCC_PLUGIN_LATENT_ENTROPY=y

# Force all structures to be initialized before they are passed to other functions.
# When building with GCC:
CONFIG_GCC_PLUGIN_STRUCTLEAK=y
CONFIG_GCC_PLUGIN_STRUCTLEAK_BYREF_ALL=y

# Wipe stack contents on syscall exit (reduces stale data lifetime in stack)
CONFIG_GCC_PLUGIN_STACKLEAK=y

# Randomize the layout of system structures. This may have dramatic performance impact, so
# use with caution or also use CONFIG_GCC_PLUGIN_RANDSTRUCT_PERFORMANCE=y
CONFIG_GCC_PLUGIN_RANDSTRUCT=y

##
## kernsec.org KSPP - ARM64 section
##

# Disallow allocating the first 32k of memory (cannot be 64k due to ARM loader).
CONFIG_DEFAULT_MMAP_MIN_ADDR=32768

# Randomize position of kernel (requires UEFI RNG or bootloader support for /chosen/kaslr-seed DT property).
CONFIG_RANDOMIZE_BASE=y

# Make sure PAN emulation is enabled.
CONFIG_ARM64_SW_TTBR0_PAN=y

# Enable Kernel Page Table Isolation to remove an entire class of cache timing side-channels.
CONFIG_UNMAP_KERNEL_AT_EL0=y

##
## kconfig-hardened-check tool provided setups
## (https://github.com/a13xp0p0v/kconfig-hardened-check.git)
##

# Enable IOMMU support for hardware isolation
CONFIG_IOMMU_SUPPORT=y

# Enable virtual memory translation debug, can be expensive
CONFIG_DEBUG_VIRTUAL=y

# Route all usermode helper kernel calls through single binary only
# CONFIG_STATIC_USERMODEHELPER=y - helper does not exist yet

# Clear busmaster bit of all PCI bridges to avoid malicious PCI devices to
# attack OS via DMA
CONFIG_EFI_DISABLE_PCI_DMA=y

# Deny merging of slab caches to prevent heap overflow attacks
CONFIG_SLAB_MERGE_DEFAULT=n

# Enable detection of directly indexed out of bounds array accesses for
# compile time
CONFIG_UBSAN=y
CONFIG_UBSAN_TRAP=y
CONFIG_UBSAN_BOUNDS=y
CONFIG_UBSAN_MISC=n

# Enable SLUB dynamic memory allocator to catch various memory allocation
# and usage issues
CONFIG_SLUB_DEBUG_ON=y

# Request firmware to clear the contents of RAM after a reboot to avoid
# reading secret contents from memory after a reboot, by booting e.g.
# another OS
CONFIG_RESET_ATTACK_MITIGATION=y

# Enable Clang's shadow call stack, which uses a shadow call stack to
# protect function return addresses from being overwritten by an attacker.
# Depends on Clang.
CONFIG_SHADOW_CALL_STACK=y

# Enable security lockdown enforcement. This prevents number of potentially
# dangerous kernel features and restricts "root" user access to some
# functionality also
CONFIG_SECURITY_LOCKDOWN_LSM=y
CONFIG_SECURITY_LOCKDOWN_LSM_EARLY=y
CONFIG_LOCK_DOWN_KERNEL_FORCE_CONFIDENTIALITY=y

# Restrict UID/GID transitions from given UID/GID to only those approved
# by a system-wide whitelist
CONFIG_SECURITY_SAFESETID=y

# Allow loading of kernel files (modules, fw, etc.) from the first filesystem
# only used for loading. Any others are rejected.
CONFIG_SECURITY_LOADPIN=y
CONFIG_SECURITY_LOADPIN_ENFORCE=y

# Prevent Kprobes tracing, as this can be used to expose pretty much everything
# from kernel
CONFIG_KPROBES=n

# Hide trace interfaces
CONFIG_GENERIC_TRACER=n

# Hide process memory details
CONFIG_PROC_PAGE_MONITOR=n

# Disable direct IO port access from /dev (similar to DEVKMEM)
CONFIG_DEVPORT=n

# Disable debugfs, this exposes wide range of debug data
CONFIG_DEBUG_FS=n

# Disable framebuffer to prevent direct memory access to graphics devices
CONFIG_FB=m

# Disable virtual terminal to cut access interfaces
CONFIG_VT=n

# Disable POSIX asynchronous I/O
CONFIG_AIO=n

# Disable staging drivers, as these can be considered non-product quality
CONFIG_STAGING=n

# Disable runtime kernel symbols generation
CONFIG_KALLSYMS=n
CONFIG_LATENCYTOP=n

# Trim unused exported kernel symbols, to reduce image size / attack surface
CONFIG_TRIM_UNUSED_KSYMS=y

# Disable magic sysrq key sequences
CONFIG_MAGIC_SYSRQ=n

# Disable user namespaces
CONFIG_USER_NS=n

# Prevent IO uring sharing between userspace / kernel
CONFIG_IO_URING=n

# Don't automatically load TTY line disciples, prevents some legacy code to be
# used
CONFIG_LDISC_AUTOLOAD=n

# Disable BPF syscall that allows to manipulate eBPF programs and maps via
# file descriptors
CONFIG_BPF_SYSCALL=n

# Disable Stream control transmission protocol to minimize attack surface
CONFIG_DLM=n
CONFIG_IP_SCTP=n

# Disable kernel tracing infrastructure
CONFIG_FTRACE=n

# Disable virtual video test driver, nothing testing related should be in
# production kernel
CONFIG_VIDEO_VIVID=n

# Enable expert mode to allow modification of some configs
CONFIG_EXPERT=y

# Randomize base address for mmap allocations, should be set to max allowable
# for the arch
CONFIG_ARCH_MMAP_RND_BITS=32

# Some extra configs for x86 architecture

# Disable X86 model specific register access
CONFIG_X86_MSR=n

# Disable cpu information
CONFIG_X86_CPUID=n

# Disable IOPERM and IOPL emulation for legacy applications
CONFIG_X86_IOPL_IOPERM=n

# Disable vsyscall emulation
CONFIG_X86_VSYSCALL_EMULATION=n

# Disable 32 bit emulation
CONFIG_IA32_EMULATION=n

# Disable local descriptor tables for very old legacy software
CONFIG_MODIFY_LDT_SYSCALL=n

# Disable vsyscall tables for legacy applications
CONFIG_LEGACY_VSYSCALL_NONE=y

# Disable ELF format dump of crashed kernel
CONFIG_PROC_VMCORE=n

# Disable ACPI table upgrades via initrd
CONFIG_ACPI_TABLE_UPGRADE=n

# Enable AMD IOMMU v2 features
CONFIG_AMD_IOMMU_V2=y

# Enable shared virtual memory for Intel IOMMU
CONFIG_INTEL_IOMMU_SVM=y

# Enable Intel DMA remapping devices by default
CONFIG_INTEL_IOMMU_DEFAULT_ON=y

# Protect lowest 64KB of memory from user allocation
CONFIG_DEFAULT_MMAP_MIN_ADDR=65536
